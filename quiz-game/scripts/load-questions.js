#!/usr/bin/env node

/**
 * ÂïèÈ°å„Éá„Éº„Çø„É≠„Éº„ÉÄ„Éº
 * „Ç´„ÉÜ„Ç¥„É™Âà•„ÅÆÂïèÈ°å„Éï„Ç°„Ç§„É´„ÇíÁµ±Âêà„Åó„Å¶questions.js„ÇíÁîüÊàê
 */

const fs = require('fs')
const path = require('path')
const chalk = require('chalk')

console.log(chalk.blue('üìö Loading and combining question files...'))

const questionsDir = path.join(__dirname, '..', 'questions')
const outputFile = path.join(__dirname, '..', 'questions.js')

// „Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const categoryFiles = {
  computing: '„Ç≥„É≥„Éî„É•„Éº„ÉÜ„Ç£„É≥„Ç∞',
  storage: '„Çπ„Éà„É¨„Éº„Ç∏',
  database: '„Éá„Éº„Çø„Éô„Éº„Çπ',
  networking: '„Éç„ÉÉ„Éà„ÉØ„Éº„Ç≠„É≥„Ç∞',
  security: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£',
  monitoring: 'Áõ£Ë¶ñ„Éª„É≠„Ç∞',
  migration: 'ÁßªË°å„ÉªÁµ±Âêà',
  analytics: 'ÂàÜÊûê„ÉªÊ©üÊ¢∞Â≠¶Áøí',
  integration: '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áµ±Âêà',
  management: 'ÁÆ°ÁêÜ„Éª„Ç¨„Éê„Éä„É≥„Çπ',
  'disaster-recovery': 'ÁÅΩÂÆ≥Âæ©Êóß',
  'cost-optimization': '„Ç≥„Çπ„ÉàÊúÄÈÅ©Âåñ',
  architecture: '„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£',
  'use-cases': '„É¶„Éº„Çπ„Ç±„Éº„Çπ',
  operations: 'ÈÅãÁî®„Éª„Éá„Éó„É≠„Ç§'
}

let allQuestions = []
const categoryStats = {}

// ÂêÑ„Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
Object.keys(categoryFiles).forEach((categoryKey) => {
  const filePath = path.join(questionsDir, `${categoryKey}.js`)

  if (fs.existsSync(filePath)) {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8')

      // ES6 exportÊßãÊñá„ÇíÂâäÈô§„Åó„Å¶eval„ÅßÂÆüË°å
      const cleanContent = fileContent
        .replace(/export\s+default\s+\w+Questions;?/g, '')
        .replace(/const\s+(\w+Questions)\s*=/, 'var $1 =')

      // eslint-disable-next-line no-eval
      eval(cleanContent)

      // Â§âÊï∞Âêç„ÇíÂãïÁöÑ„Å´ÂèñÂæó
      const variableName = `${categoryKey.replace(/-([a-z])/g, (g) =>
        g[1].toUpperCase()
      )}Questions`

      // eslint-disable-next-line no-eval
      const questions = eval(variableName)

      if (Array.isArray(questions)) {
        allQuestions = allQuestions.concat(questions)
        categoryStats[categoryFiles[categoryKey]] = questions.length
        console.log(
          chalk.green(`‚úÖ ${categoryKey}.js: ${questions.length} questions`)
        )
      } else {
        console.log(
          chalk.yellow(`‚ö†Ô∏è  ${categoryKey}.js: No valid questions array found`)
        )
      }
    } catch (error) {
      console.log(
        chalk.red(`‚ùå Error loading ${categoryKey}.js: ${error.message}`)
      )
    }
  } else {
    console.log(chalk.yellow(`‚ö†Ô∏è  ${categoryKey}.js: File not found`))
  }
})

// Áµ±Âêà„Åï„Çå„Åüquestions.js„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
const outputContent = `// AWS Solution Architect Professional Ë©¶È®ìÂØæÁ≠ñ„ÇØ„Ç§„Ç∫ÂïèÈ°å„Éá„Éº„Çø
// Ëá™ÂãïÁîüÊàê„Éï„Ç°„Ç§„É´ - ÊâãÂãïÁ∑®ÈõÜ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ
// ÁîüÊàêÊó•ÊôÇ: ${new Date().toISOString()}

// ÂÖ®ÂïèÈ°å„Éá„Éº„Çø
const allQuestions = ${JSON.stringify(allQuestions, null, 2).replace(
  /'/g,
  '"'
)};

// „Ç´„ÉÜ„Ç¥„É™Âà•Áµ±Ë®à
const questionStats = ${JSON.stringify(categoryStats, null, 2).replace(
  /'/g,
  '"'
)};

// „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
const getQuestionStats = () => questionStats;

const getQuestionsByCategory = (category) => {
    return allQuestions.filter(q => q.category === category);
};

const getRandomQuestions = (count = 10) => {
    const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
};

const getRandomQuestionsByCategory = (category, count = 5) => {
    const categoryQuestions = getQuestionsByCategory(category);
    const shuffled = [...categoryQuestions].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
};

const getAllCategories = () => {
    return Object.keys(questionStats);
};

const getQuestionById = (id) => {
    return allQuestions.find(q => q.id === id);
};

// „Éá„Éê„ÉÉ„Ç∞Áî®Èñ¢Êï∞
const validateQuestions = () => {
    const errors = [];
    const usedIds = new Set();
    
    allQuestions.forEach((question, index) => {
        // IDÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
        if (usedIds.has(question.id)) {
            errors.push(\`Duplicate ID: \${question.id}\`);
        } else {
            usedIds.add(question.id);
        }
        
        // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
        const requiredFields = ['id', 'category', 'question', 'options', 'correct', 'explanation'];
        requiredFields.forEach(field => {
            if (!(field in question)) {
                errors.push(\`Question \${index + 1}: Missing field '\${field}'\`);
            }
        });
        
        // ÈÅ∏ÊäûËÇ¢Êï∞„ÉÅ„Çß„ÉÉ„ÇØ
        if (!Array.isArray(question.options) || question.options.length !== 4) {
            errors.push(\`Question \${index + 1}: Must have exactly 4 options\`);
        }
        
        // Ê≠£Ëß£„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        if (typeof question.correct !== 'number' || question.correct < 0 || question.correct > 3) {
            errors.push(\`Question \${index + 1}: Correct answer index must be 0-3\`);
        }
    });
    
    return errors;
};

// „Ç∞„É≠„Éº„Éê„É´„Çπ„Ç≥„Éº„Éó„ÅßÂà©Áî®ÂèØËÉΩ„Å´„Åô„Çã
if (typeof window !== 'undefined') {
    window.allQuestions = allQuestions;
    window.questionStats = questionStats;
    window.getQuestionStats = getQuestionStats;
    window.getQuestionsByCategory = getQuestionsByCategory;
    window.getRandomQuestions = getRandomQuestions;
    window.getRandomQuestionsByCategory = getRandomQuestionsByCategory;
    window.getAllCategories = getAllCategories;
    window.getQuestionById = getQuestionById;
    window.validateQuestions = validateQuestions;
}
`

// „Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„Åø
fs.writeFileSync(outputFile, outputContent)

// ÁµêÊûúË°®Á§∫
console.log('\n' + chalk.blue('üìä Question Loading Summary:'))
console.log(chalk.gray('‚îÄ'.repeat(50)))
console.log(chalk.green(`‚úÖ Total questions loaded: ${allQuestions.length}`))
console.log(chalk.green(`‚úÖ Categories: ${Object.keys(categoryStats).length}`))

console.log('\n' + chalk.blue('üìà Questions by Category:'))
Object.entries(categoryStats)
  .sort(([, a], [, b]) => b - a)
  .forEach(([category, count]) => {
    const percentage = ((count / allQuestions.length) * 100).toFixed(1)
    console.log(chalk.gray(`  ${category}: ${count} (${percentage}%)`))
  })

console.log(
  '\n' + chalk.green('‚úÖ Combined questions.js generated successfully!')
)
console.log(chalk.gray(`üìÅ Output: ${outputFile}`))

// Âü∫Êú¨ÁöÑ„Å™Ê§úË®º
const errors = []
const usedIds = new Set()

allQuestions.forEach((question, index) => {
  if (usedIds.has(question.id)) {
    errors.push(`Duplicate ID: ${question.id}`)
  } else {
    usedIds.add(question.id)
  }
})

if (errors.length > 0) {
  console.log('\n' + chalk.red('‚ùå Validation Errors:'))
  errors.forEach((error) => console.log(chalk.red(`  ${error}`)))
  process.exit(1)
} else {
  console.log('\n' + chalk.green('‚úÖ All questions validated successfully!'))
}
