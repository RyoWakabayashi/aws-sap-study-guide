#!/usr/bin/env node

/**
 * ビルドスクリプト
 * - ファイルの最適化
 * - 本番用設定の適用
 * - ビルド成果物の生成
 */

const fs = require('fs')
const path = require('path')
const chalk = require('chalk')

console.log(chalk.blue('🔨 Building AWS SAP Quiz Game...'))

const sourceDir = path.join(__dirname, '..')
const buildDir = path.join(__dirname, '..', 'dist')

// ビルドディレクトリの作成
if (fs.existsSync(buildDir)) {
  fs.rmSync(buildDir, { recursive: true })
}
fs.mkdirSync(buildDir, { recursive: true })

// コピーするファイル
const filesToCopy = [
  'index.html',
  'styles.css',
  'script.js',
  'questions.js',
  'manifest.json',
  'sw.js',
  'README.md'
]

console.log(chalk.gray('📁 Copying files...'))

filesToCopy.forEach((file) => {
  const sourcePath = path.join(sourceDir, file)
  const destPath = path.join(buildDir, file)

  if (fs.existsSync(sourcePath)) {
    let content = fs.readFileSync(sourcePath, 'utf8')

    // ファイル別の最適化処理
    if (file === 'index.html') {
      // HTMLの最適化
      content = optimizeHTML(content)
    } else if (file === 'styles.css') {
      // CSSの最適化
      content = optimizeCSS(content)
    } else if (file === 'script.js') {
      // JavaScriptの最適化
      content = optimizeJS(content)
    } else if (file === 'sw.js') {
      // Service Workerのキャッシュ名を更新
      content = updateServiceWorker(content)
    }

    fs.writeFileSync(destPath, content)
    console.log(chalk.green(`✅ ${file}`))
  } else {
    console.log(chalk.yellow(`⚠️  ${file} not found, skipping`))
  }
})

// HTMLの最適化
function optimizeHTML (content) {
  // コメントの削除（ライセンス情報は保持）
  content = content.replace(/<!--(?!\s*Copyright)[\s\S]*?-->/g, '')

  // 余分な空白の削除
  content = content.replace(/\s+/g, ' ')
  content = content.replace(/>\s+</g, '><')

  // 本番用の設定
  content = content.replace(
    '<meta name="description" content="AWS Solution Architect Professional試験対策のためのインタラクティブクイズゲーム">',
    '<meta name="description" content="AWS Solution Architect Professional試験対策のためのインタラクティブクイズゲーム - 100問以上の4択クイズで効率的に学習">'
  )

  return content.trim()
}

// CSSの最適化
function optimizeCSS (content) {
  // コメントの削除（ライセンス情報は保持）
  content = content.replace(/\/\*(?!\s*Copyright)[\s\S]*?\*\//g, '')

  // 余分な空白の削除
  content = content.replace(/\s+/g, ' ')
  content = content.replace(/;\s*}/g, '}')
  content = content.replace(/{\s*/g, '{')
  content = content.replace(/;\s*/g, ';')

  return content.trim()
}

// JavaScriptの最適化
function optimizeJS (content) {
  // デバッグ用のconsole.logを削除（エラー系は保持）
  content = content.replace(/console\.log\([^)]*\);?\n?/g, '')

  // デバッグモードの無効化
  content = content.replace(
    'this.debugMode = this.isDebugMode()',
    'this.debugMode = false'
  )

  // デバッグ機能の削除
  content = content.replace(/if \(this\.debugMode\) \{[\s\S]*?\}/g, '')

  return content
}

// Service Workerのキャッシュ名更新
function updateServiceWorker (content) {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[-:]/g, '')
  content = content.replace(
    /const CACHE_NAME = '[^']*'/,
    `const CACHE_NAME = 'aws-sap-quiz-${timestamp}'`
  )
  return content
}

// ビルド情報ファイルの作成
const buildInfo = {
  buildTime: new Date().toISOString(),
  version: require('../package.json').version,
  files: filesToCopy.filter((file) =>
    fs.existsSync(path.join(sourceDir, file))
  )
}

fs.writeFileSync(
  path.join(buildDir, 'build-info.json'),
  JSON.stringify(buildInfo, null, 2)
)

// ビルド統計の表示
console.log('\n' + chalk.blue('📊 Build Statistics:'))
console.log(chalk.gray('─'.repeat(50)))

const totalSize = filesToCopy.reduce((total, file) => {
  const filePath = path.join(buildDir, file)
  if (fs.existsSync(filePath)) {
    const size = fs.statSync(filePath).size
    const sizeKB = Math.round(size / 1024)
    console.log(
      chalk.gray(`${file.padEnd(20)} ${sizeKB.toString().padStart(6)} KB`)
    )
    return total + size
  }
  return total
}, 0)

const totalSizeKB = Math.round(totalSize / 1024)
console.log(chalk.gray('─'.repeat(50)))
console.log(chalk.blue(`Total size: ${totalSizeKB} KB`))

console.log('\n' + chalk.green('✅ Build completed successfully!'))
console.log(chalk.gray(`📁 Build output: ${buildDir}`))
console.log(chalk.gray(`🕒 Build time: ${new Date().toLocaleString()}`))

// GitHub Pages用の設定ファイル作成
const githubPagesConfig = `# GitHub Pages Configuration
# This file is automatically generated during build

# Custom domain (uncomment and modify if needed)
# your-domain.com

# Build info
# Built at: ${new Date().toISOString()}
# Version: ${buildInfo.version}
`

fs.writeFileSync(path.join(buildDir, '.nojekyll'), '')
fs.writeFileSync(path.join(buildDir, 'CNAME.example'), githubPagesConfig)
